import bpy
from math import pi, radians
from mathutils import Vector
import sys
import os

#config

rootDir = 'd:/projects/astronomy/tgas/'
convertPath = '"c:/Program Files/ImageMagick-6.9.6-Q16/convert.exe"'

#code

def create_light(id,location,angle):
    """
    Add a mesh light for cycles
    """

    # Add new plane
    bpy.ops.mesh.primitive_plane_add(location=location)
    plane = bpy.context.active_object
    plane.cycles_visibility.camera = False
    plane.name = 'Light Plane '+str(id)
    plane.scale = Vector((400, 400, 400))
    # tilt
    plane.rotation_euler.rotate_axis('Y', radians(angle))

    # Create a new material
    material = bpy.data.materials.new(name="Plane Light Emission Shader")
    material.use_nodes = True

    # Remove default
    material.node_tree.nodes.remove(material.node_tree.nodes.get('Diffuse BSDF'))
    material_output = material.node_tree.nodes.get('Material Output')
    emission = material.node_tree.nodes.new('ShaderNodeEmission')
    emission.inputs['Strength'].default_value = 2.0

    # link emission shader to material
    material.node_tree.links.new(material_output.inputs[0], emission.outputs[0])

    # set activer material to your new material
    plane.active_material = material

def createCamera(origin,angles):
    # Create object and camera
    bpy.ops.object.add(type='CAMERA',location=origin,rotation=angles)
    ob = bpy.context.object
    ob.name = 'MyCamOb'
    cam = ob.data
    cam.name = 'MyCam'
    # Lens
    cam.ortho_scale = 1000
    cam.type = 'ORTHO'
    cam.lens = 35
    cam.lens_unit = 'MILLIMETERS'
    cam.shift_x = 0.0
    cam.shift_y = 0.0
    cam.clip_start = 0.001
    cam.clip_end = 500000.0
    #empty = bpy.data.objects.new('DofEmpty', None)
    #empty.location = origin+Vector((0,10,0))
    #cam.dof_object = empty
    # Display
    #cam.show_title_safe = True
    cam.show_name = True
    # Make this the current camera
    scn = bpy.context.scene
    scn.camera = ob
    return ob

argv = sys.argv
argv = argv[argv.index("--") + 1:] # get all args after "--"

cArray = {1: (0.26994400000000002, 0.014625000000000001, 0.34137899999999999, 1.0), 
2: (0.27380900000000002, 0.031496999999999997, 0.35885299999999998, 1.0), 3: (0.27602199999999999, 0.044166999999999998, 0.37016399999999999, 1.0), 4: (0.27879100000000001, 0.062144999999999999, 0.38659199999999999, 1.0), 5: (0.28026699999999999, 0.073416999999999996, 0.39716299999999999, 1.0), 6: (0.28192400000000001, 0.089665999999999996, 0.41241499999999998, 1.0), 7: (0.28265600000000002, 0.10019599999999999, 0.42215999999999998, 1.0), 8: (0.28319699999999998, 0.11568000000000001, 0.43611499999999997, 1.0), 9: (0.28307199999999999, 0.13089500000000001, 0.449241, 1.0), 10: (0.28262300000000001, 0.140926, 0.45751700000000001, 1.0), 11: (0.281412, 0.155834, 0.46920099999999998, 1.0), 12: (0.28025499999999998, 0.16569300000000001, 0.47649799999999998, 1.0), 13: (0.27801199999999998, 0.180367, 0.48669699999999999, 1.0), 14: (0.276194, 0.19007399999999999, 0.49300100000000002, 1.0), 15: (0.27300600000000003, 0.20452000000000001, 0.50172099999999997, 1.0), 16: (0.27059499999999997, 0.21406900000000001, 0.50705199999999995, 1.0), 17: (0.26657999999999998, 0.22826199999999999, 0.51434899999999995, 1.0), 18: (0.26213799999999998, 0.242286, 0.52083699999999999, 1.0), 19: (0.258965, 0.25153700000000001, 0.52473599999999998, 1.0), 20: (0.25393500000000002, 0.26525399999999999, 0.52998299999999998, 1.0), 21: (0.25042500000000001, 0.27428999999999998, 0.53310299999999999, 1.0), 22: (0.244972, 0.28767500000000001, 0.53725999999999996, 1.0), 23: (0.24123700000000001, 0.296485, 0.53970899999999999, 1.0), 24: (0.23552600000000001, 0.309527, 0.54294399999999998, 1.0), 25: (0.229739, 0.32236100000000001, 0.54570600000000002, 1.0), 26: (0.22586300000000001, 0.33080500000000002, 0.54731399999999997, 1.0), 27: (0.220057, 0.34330699999999997, 0.54941300000000004, 1.0), 28: (0.21621000000000001, 0.35153499999999999, 0.55062699999999998, 1.0), 29: (0.210503, 0.36372700000000002, 0.55220599999999997, 1.0), 30: (0.206756, 0.37175799999999998, 0.55311699999999997, 1.0), 31: (0.201239, 0.38367000000000001, 0.55429399999999995, 1.0), 32: (0.19763600000000001, 0.39152799999999999, 0.55496900000000005, 1.0), 33: (0.192357, 0.40319899999999997, 0.555836, 1.0), 34: (0.18723100000000001, 0.414746, 0.55654700000000001, 1.0), 35: (0.18389800000000001, 0.42238300000000001, 0.55694399999999999, 1.0), 36: (0.17901900000000001, 0.43375599999999997, 0.55742999999999998, 1.0), 37: (0.175841, 0.44129000000000002, 0.55768499999999999, 1.0), 38: (0.17117599999999999, 0.45252999999999999, 0.55796500000000004, 1.0), 39: (0.168126, 0.45998800000000001, 0.55808199999999997, 1.0), 40: (0.16362499999999999, 0.47113300000000002, 0.55814799999999998, 1.0), 41: (0.160665, 0.47854000000000002, 0.55811500000000003, 1.0), 42: (0.15626999999999999, 0.489624, 0.55793599999999999, 1.0), 43: (0.151918, 0.50068500000000005, 0.55758700000000005, 1.0), 44: (0.149039, 0.50805100000000003, 0.55725000000000002, 1.0), 45: (0.144759, 0.51909300000000003, 0.55657199999999996, 1.0), 46: (0.14193500000000001, 0.52645299999999995, 0.55599100000000001, 1.0), 47: (0.13777, 0.53749199999999997, 0.55490600000000001, 1.0), 48: (0.13506599999999999, 0.54485300000000003, 0.55402899999999999, 1.0), 49: (0.13117200000000001, 0.55589900000000003, 0.55245900000000003, 1.0), 50: (0.12756799999999999, 0.56694900000000004, 0.55055600000000005, 1.0), 51: (0.12539400000000001, 0.574318, 0.54908599999999996, 1.0), 52: (0.12260600000000001, 0.58537099999999997, 0.54655699999999996, 1.0), 53: (0.12114800000000001, 0.59273900000000002, 0.54464100000000004, 1.0), 54: (0.119738, 0.60378500000000002, 0.54139999999999999, 1.0), 55: (0.119423, 0.61114100000000005, 0.53898199999999996, 1.0), 56: (0.12008099999999999, 0.62216099999999996, 0.53494600000000003, 1.0), 57: (0.12138, 0.62949200000000005, 0.53197300000000003, 1.0), 58: (0.12478, 0.64046099999999995, 0.52706799999999998, 1.0), 59: (0.13006699999999999, 0.65138399999999996, 0.52160799999999996, 1.0), 60: (0.13469200000000001, 0.658636, 0.51764900000000003, 1.0), 61: (0.14330300000000001, 0.66945900000000003, 0.51121499999999997, 1.0), 62: (0.150148, 0.67663099999999998, 0.50658899999999996, 1.0), 63: (0.16201599999999999, 0.68731600000000004, 0.49912899999999999, 1.0), 64: (0.17094799999999999, 0.694384, 0.49380299999999999, 1.0), 65: (0.185783, 0.70489100000000005, 0.48527300000000001, 1.0), 66: (0.196571, 0.71182699999999999, 0.47922100000000001, 1.0), 67: (0.214, 0.72211400000000003, 0.46958800000000001, 1.0), 68: (0.23281499999999999, 0.73224699999999998, 0.45927699999999999, 1.0), 69: (0.24607000000000001, 0.73890999999999996, 0.45202399999999998, 1.0), 70: (0.26694099999999998, 0.74875100000000006, 0.44057299999999999, 1.0), 71: (0.28147699999999998, 0.75520299999999996, 0.43255199999999999, 1.0), 72: (0.30414799999999997, 0.76470400000000005, 0.41994300000000001, 1.0), 73: (0.31980900000000001, 0.77091399999999999, 0.41115200000000002, 1.0), 74: (0.34407399999999999, 0.78002899999999997, 0.39738099999999998, 1.0), 75: (0.36921399999999999, 0.78888800000000003, 0.38291399999999998, 1.0), 76: (0.38643300000000003, 0.79464400000000002, 0.372886, 1.0), 77: (0.41291299999999997, 0.803041, 0.357269, 1.0), 78: (0.430983, 0.808473, 0.34647600000000001, 1.0), 79: (0.45867400000000003, 0.81636299999999995, 0.32972699999999999, 1.0), 80: (0.47750399999999998, 0.82144399999999995, 0.31819500000000001, 1.0), 81: (0.50627100000000003, 0.82878600000000002, 0.30036200000000002, 1.0), 82: (0.52577600000000002, 0.83349099999999998, 0.28812700000000002, 1.0), 83: (0.55548399999999998, 0.84025399999999995, 0.26928099999999999, 1.0), 84: (0.58567800000000003, 0.846661, 0.24989700000000001, 1.0), 85: (0.60604499999999994, 0.85073299999999996, 0.23671200000000001, 1.0), 86: (0.63690199999999997, 0.85654200000000003, 0.21662000000000001, 1.0), 87: (0.65764199999999995, 0.86021899999999996, 0.20308200000000001, 1.0), 88: (0.688944, 0.865448, 0.182725, 1.0), 89: (0.70989800000000003, 0.86875100000000005, 0.16925699999999999, 1.0), 90: (0.74138800000000005, 0.87344900000000003, 0.149561, 1.0), 91: (0.76237299999999997, 0.87642399999999998, 0.13706399999999999, 1.0), 92: (0.79376000000000002, 0.88067799999999996, 0.120005, 1.0), 93: (0.82494000000000001, 0.88471999999999995, 0.10621700000000001, 1.0), 
94: (0.84556100000000001, 0.88732200000000006, 0.099701999999999999, 1.0), 95: (0.87616799999999995, 0.89112499999999994, 0.095250000000000001, 1.0), 96: (0.89632000000000001, 0.89361599999999997, 0.096335000000000004, 1.0), 97: (0.92610599999999998, 0.89732999999999996, 0.104071, 1.0), 98: (0.94563600000000003, 0.89981500000000003, 0.11283799999999999, 1.0), 99: (0.97441699999999998, 0.90359, 0.130215, 1.0), 100: (0.99324800000000002, 0.90615699999999999, 0.14393600000000001, 1.0)}
 
isoType = argv[0]

if isoType == 'hot':
    percentages = range(40,100,5)
elif isoType == 'bright':
    percentages = [85,90,95,97]

startPercent = percentages[0]
endPercent = percentages[-1]

renderDir = rootDir+'output/slices/'+isoType+'/iso/renders/'

if not os.path.isdir(renderDir):
    os.mkdir(renderDir)

orthoRenderDir = renderDir+'ortho/'

if not os.path.isdir(orthoRenderDir):
    os.mkdir(orthoRenderDir)

for percent in percentages:

    #delete pre-existing meshes (including the cube)
    # gather list of items of interest.
    candidate_list = [item.name for item in bpy.data.objects if item.type == "MESH"]
    #
    ## select them only.
    for object_name in candidate_list:
        bpy.data.objects[object_name].select = True

    # remove all selected.
    bpy.ops.object.delete()

    # remove the meshes, they have no users anymore.
    for item in bpy.data.meshes:
        bpy.data.meshes.remove(item)

    render = bpy.context.scene.render
    render.resolution_x = 8192
    render.resolution_y = 8192
    render.resolution_percentage = 100

    bpy.data.worlds["World"].horizon_color = [0,0,0]

    scn = bpy.context.scene
    scn.render.engine = 'CYCLES'
    scn.world.use_nodes = True
    scn.cycles.samples = 256
    # scn.render.tile_x = 64
    # scn.render.tile_y = 64
    scn.render.tile_x = 256
    scn.render.tile_y = 256
    bpy.context.user_preferences.system.compute_device_type = 'CUDA'
    bpy.data.scenes["Scene"].cycles.device='GPU'

    create_light(1,(1000,-400,-200),90)
    create_light(2,(-200,-400,1000),-90)
    create_light(3,(1000,-400,1000),90)
    create_light(4,(-200,-400,-200),-90)
    cam = createCamera((408,-1200,399.0),(-pi/2,0.0,pi))
    #cam = createCamera((2100.0,0.0,0.0),(0.0,pi/2,0.0))
    #full_path_to_file = "d:/projects/astronomy/gaia/temp_sigma_15/iso/3d/iso_"+str(density)+"_percent_new.obj"
    full_path_to_file = rootDir+'output/slices/'+isoType+'/iso/iso_'+str(percent)+'_percent_filtered.obj'
    bpy.ops.import_scene.obj(filepath=full_path_to_file)
    # Create a material

    Materialname1='FirstMat_'+str(percent)
    mat = bpy.data.materials.new(Materialname1)

    c = cArray[int(100*(percent-startPercentage)/(endPercentage-startPercentage))]

    color = [c[0],c[1],c[2]]

    mat.diffuse_color = color
        
    ob = bpy.data.objects['grp1']

    myMesh = ob.data

    bpy.context.scene.objects.active = ob
    bpy.ops.object.shade_smooth()

    ob.material_slots[0].material = bpy.data.materials[Materialname1]
    sceneKey = bpy.data.scenes.keys()[0]

    bpy.data.scenes[sceneKey].render.filepath = orthoRenderDir+'iso_'+str(percent)+'_percent.png'
    bpy.ops.render.render(write_still=True)

p1 = percentages[0]
script = 'cp iso_'+str(p1)+'_percent.png stack.png'+"\n"
for i in percentages[1:]:
    script += convertPath + ' stack.png "(" -transparent "#000000" -channel A -virtual-pixel transparent '
    script += '-morphology Distance Euclidean:4,10! iso_'+str(i)+'_percent.png ")"  -composite stack.png'+"\n"

fp = open(orthoRenderDir+'stack.sh','w')
fp.write(script)
fp.close()